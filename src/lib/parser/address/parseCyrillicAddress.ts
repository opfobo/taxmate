import { transliterate } from "@/lib/utils/transliterate";

export interface ParsedCyrillicAddress {
  name: string;
  phone: string;
  postal_code?: string;
  region?: string;
  city?: string;
  street?: string;
  house?: string;
  block?: string;
  apartment?: string;
  birthday?: string;
  email?: string;
  raw: string;
  translit?: {
    name?: string;
    city?: string;
    street?: string;
    region?: string;
  };
}

export function parseCyrillicAddress(input: string): ParsedCyrillicAddress {
  const raw = input.trim();
  const lines = raw.split(/\n|\r|,/).map(l => l.trim()).filter(Boolean);
  const joined = lines.join(" ");

  const result: ParsedCyrillicAddress = {
    name: "",
    phone: "",
    raw,
  };

  // üìû Telefonnummer
  const phoneMatch = joined.match(/(?:\+7|8)?[\s\-]?(\(?9\d{2}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2})/);
  if (phoneMatch) {
    result.phone = `'${phoneMatch[0].replace(/[^\d]/g, "")}`;
  }

  // üìß E-Mail
  const emailMatch = joined.match(/[\w.-]+@[\w.-]+\.[a-z]{2,}/i);
  if (emailMatch) {
    result.email = emailMatch[0];
  }

  // üéÇ Geburtstag
  const birthdayMatch = joined.match(/\b(\d{2}[./-]\d{2}[./-](?:\d{4}|\d{2}))\b/);
  if (birthdayMatch) {
    result.birthday = birthdayMatch[1].replace(/\//g, ".");
  }

  // üßç‚Äç‚ôÇÔ∏è Name
  const nameMatch = joined.match(/[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+/);
  if (nameMatch) {
    result.name = nameMatch[0];
  }

  // üì¶ PLZ
  const postalMatch = joined.match(/\b\d{6}\b/);
  if (postalMatch) result.postal_code = postalMatch[0];

  // üèôÔ∏è Stadt
  const cityMatch = joined.match(/–≥\.\s?[–ê-–Ø–∞-—è—ë\- ]+|–°–∞–Ω–∫—Ç[\- ]–ü–µ—Ç–µ—Ä–±—É—Ä–≥|–ú–æ—Å–∫–≤–∞|–ò–≤–∞–Ω–æ–≤–æ|–û–º—Å–∫|–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥|–¢–æ–ª—å—è—Ç—Ç–∏/i);
  if (cityMatch) result.city = cityMatch[0].replace(/^–≥\.\s?/, "").trim();

  // üõ£Ô∏è Stra√üe
  const streetMatch = joined.match(/—É–ª\.?\s?[–ê-–Ø–∞-—è—ë0-9\- ]+|—É–ª–∏—Ü–∞\s[–ê-–Ø–∞-—è—ë0-9\- ]+|–ø—Ä–æ—Å–ø–µ–∫—Ç\s[–ê-–Ø–∞-—è—ë0-9\- ]+|–ø–µ—Ä–µ—É–ª–æ–∫\s[–ê-–Ø–∞-—è—ë0-9\- ]+/i);
  if (streetMatch) result.street = streetMatch[0].replace(/^(—É–ª\.?|—É–ª–∏—Ü–∞|–ø—Ä–æ—Å–ø–µ–∫—Ç|–ø–µ—Ä–µ—É–ª–æ–∫)\s?/, "").trim();

  // üè† Hausnummer
  const houseMatch = joined.match(/–¥\.\s?(\d+[–∞-—è–ê-–Ø–∞-—è]*)|–¥–æ–º\s?(\d+[–∞-—è–ê-–Ø–∞-—è]*)/i);
  if (houseMatch) result.house = houseMatch[1] || houseMatch[2];

  // üß± Korpus / Block
  const blockMatch = joined.match(/–∫–æ—Ä–ø(?:\.|—É—Å)?\s?(\d+)/i);
  if (blockMatch) result.block = blockMatch[1];

  // üö™ Wohnung
  const kvMatch = joined.match(/–∫–≤\.?\s?(\d+)|–∫–í\.?\s?(\d+)/i);
  if (kvMatch) result.apartment = kvMatch[1] || kvMatch[2];

  // üåç Region / Oblast / Krai / Respublika
  const regionPatterns = [
    /([–ê-–Ø–∞-—è—ë\- ]+?)\s*(–æ–±–ª\.|–æ–±–ª–∞—Å—Ç—å)/i,
    /([–ê-–Ø–∞-—è—ë\- ]+?)\s*(–∫—Ä–∞–π)/i,
    /([–ê-–Ø–∞-—è—ë\- ]+?)\s*(—Ä–µ—Å–ø\.|—Ä–µ—Å–ø—É–±–ª–∏–∫–∞)/i,
    /–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å/i,
  ];
  for (const pattern of regionPatterns) {
    const match = joined.match(pattern);
    if (match) {
      result.region = match[0].replace(/(–æ–±–ª\.?|–æ–±–ª–∞—Å—Ç—å|–∫—Ä–∞–π|—Ä–µ—Å–ø\.?|—Ä–µ—Å–ø—É–±–ª–∏–∫–∞)/i, "").trim();
      break;
    }
  }

  // üî§ Transliteration
  result.translit = {
    name: result.name ? transliterate(result.name) : undefined,
    city: result.city ? transliterate(result.city) : undefined,
    street: result.street ? transliterate(result.street) : undefined,
    region: result.region ? transliterate(result.region) : undefined,
  };

  return result;
}
